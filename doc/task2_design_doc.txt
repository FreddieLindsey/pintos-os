             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Elias Benussi     <eb1314@imperial.ac.uk>
James Lane        <jrl14@imperial.ac.uk>
Frederick Lindsey <fl1414@imperial.ac.uk>
Oliver Norton     <otn14@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: (8 marks)
>> Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We take the full string argument passed in and tokenise it using the pintos
implementation of strtok_r() delimited by whitespace. This gives an array of
strings, which is stored in an allocated page of memory. The elements of this
array are the order in which they are in the initial string, and are pushed
onto the stack in reverse order, saving the stack pointer in argv each push.
After pushing all of the strings onto the stack, and word aligning the stack
pointer for efficient accessing, a null pointer and the pointers in argv are 
also pushed. Argv elements are pushed in reverse order as well, corresponding
to the order of the pushed argument strings. This ensures argv is in the correct
order. Finally the pointer to the start of argv is pushed and a null return
address. 

****** TODO: stack overflowing page. ******


---- RATIONALE ----

>> A3: (5 marks)
>> Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is reentrant which means it can be interrupted in the middle of its 
execution and then safely called again before the previous call finishes.
strtok() can cause concurrency bugs if called by multiple threads due its use 
of global variables. Pintos would implement strtok_r() rather than strtok() 
because Pintos runs multiple threads. A threadsafe version is much more useful, allowing safe use without requiring synchronisation.

>> A4: (10 marks)
>> In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The shell is a user program which means it cannot access kernel memory and has limited permissions.


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (10 marks) 
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: (5 marks)
>> Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: (5 marks)
>> Describe your code for reading and writing user data from the
>> kernel.

>> B4: (5 marks)
>> Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: (8 marks)
>> Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: (5 marks)
>> Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated. System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a
>> paragraph, describe the strategy or strategies you adopted for
>> managing these issues.

---- SYNCHRONIZATION ----

>> B7: (5 marks)
>> The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: (5 marks)
>> Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: (5 marks)
>> Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: (5 marks)
>> What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: (2 marks)
>> The default tid_t to pid_t mapping is the identity mapping.
>> Did you change this? Why?
